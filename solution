class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def delete_middle(self):
        if not self.head:
            return

        slow_ptr = self.head
        fast_ptr = self.head
        prev_ptr = None

        while fast_ptr and fast_ptr.next:
            fast_ptr = fast_ptr.next.next
            prev_ptr = slow_ptr
            slow_ptr = slow_ptr.next

        # Remove the middle node
        if prev_ptr:
            prev_ptr.next = slow_ptr.next
        else:
            self.head = slow_ptr.next

    def display(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

# Example usage
if __name__ == "__main__":
    linked_list = LinkedList()
    linked_list.append(1)
    linked_list.append(2)
    linked_list.append(3)
    linked_list.append(4)
    linked_list.append(5)

    print("Original Linked List:")
    linked_list.display()

    linked_list.delete_middle()

    print("Linked List after deleting the middle node:")
    linked_list.display()
